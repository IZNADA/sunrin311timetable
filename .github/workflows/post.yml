name: Insta Timetable
on:
  schedule:
    - cron: "0 22 * * *"  # UTC 22:00 = KST 07:00
  workflow_dispatch:

jobs:
  daily:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      POST_TEST_MODE: "false"
      # 이미지 공개 URL: 운영은 CDN 템플릿 권장, 테스트는 catbox 사용 가능
      # IMAGE_URL_TEMPLATE: https://cdn.example.com/timetable/{basename}
      UPLOAD_PROVIDER: catbox
      NEIS_KEY: ${{ secrets.NEIS_KEY || vars.NEIS_KEY }}
      # Fixed mode (if provided)
      IG_PAGE_ACCESS_TOKEN: ${{ secrets.IG_PAGE_ACCESS_TOKEN }}
      IG_BUSINESS_ID: ${{ secrets.IG_BUSINESS_ID }}
      # Auto mode (optional)
      IG_USER_ACCESS_TOKEN: ${{ secrets.IG_USER_ACCESS_TOKEN }}
      PAGE_ID: ${{ secrets.PAGE_ID }}
      FB_APP_ID: ${{ secrets.FB_APP_ID }}
      FB_APP_SECRET: ${{ secrets.FB_APP_SECRET }}
      TOKEN_REFRESH_THRESHOLD_DAYS: 7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: pip install -r requirements.txt
      - name: Preflight env
        run: |
          python - << 'PY'
          import os, sys
          has_fixed_full = all(bool(os.getenv(k)) for k in ['IG_PAGE_ACCESS_TOKEN','IG_BUSINESS_ID'])
          has_fixed_partial = all(bool(os.getenv(k)) for k in ['IG_PAGE_ACCESS_TOKEN','PAGE_ID'])
          has_auto  = all(bool(os.getenv(k)) for k in ['IG_USER_ACCESS_TOKEN','PAGE_ID'])
          if not bool(os.getenv('NEIS_KEY')):
              print('Missing NEIS_KEY')
              sys.exit(1)
          if not (has_fixed_full or has_fixed_partial or has_auto):
              print('Provide one of:')
              print('- Fixed: IG_PAGE_ACCESS_TOKEN + IG_BUSINESS_ID')
              print('- Fixed (derive IG id): IG_PAGE_ACCESS_TOKEN + PAGE_ID')
              print('- Auto: IG_USER_ACCESS_TOKEN + PAGE_ID (+ FB_APP_ID/FB_APP_SECRET)')
              sys.exit(1)
          print('Preflight OK')
          PY
      - name: Restore state cache (token/hash)
        uses: actions/cache/restore@v4
        with:
          path: state
          key: state-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            state-${{ github.ref_name }}-
            state-
      - name: Run once (generate + post)
        run: python -m src.daemon --run-now
      - name: Save state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: state
          key: state-${{ github.ref_name }}-${{ github.run_id }}
      - name: Upload image artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: timetable-image
          path: out/*.jpg
          if-no-files-found: warn
